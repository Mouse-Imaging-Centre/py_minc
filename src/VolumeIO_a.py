# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_VolumeIO_a', [dirname(__file__)])
        except ImportError:
            import _VolumeIO_a
            return _VolumeIO_a
        if fp is not None:
            try:
                _mod = imp.load_module('_VolumeIO_a', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _VolumeIO_a = swig_import_helper()
    del swig_import_helper
else:
    import _VolumeIO_a
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def new_RealArray(*args):
  return _VolumeIO_a.new_RealArray(*args)
new_RealArray = _VolumeIO_a.new_RealArray

def delete_RealArray(*args):
  return _VolumeIO_a.delete_RealArray(*args)
delete_RealArray = _VolumeIO_a.delete_RealArray

def RealArray_getitem(*args):
  return _VolumeIO_a.RealArray_getitem(*args)
RealArray_getitem = _VolumeIO_a.RealArray_getitem

def RealArray_setitem(*args):
  return _VolumeIO_a.RealArray_setitem(*args)
RealArray_setitem = _VolumeIO_a.RealArray_setitem

def new_intArray(*args):
  return _VolumeIO_a.new_intArray(*args)
new_intArray = _VolumeIO_a.new_intArray

def delete_intArray(*args):
  return _VolumeIO_a.delete_intArray(*args)
delete_intArray = _VolumeIO_a.delete_intArray

def intArray_getitem(*args):
  return _VolumeIO_a.intArray_getitem(*args)
intArray_getitem = _VolumeIO_a.intArray_getitem

def intArray_setitem(*args):
  return _VolumeIO_a.intArray_setitem(*args)
intArray_setitem = _VolumeIO_a.intArray_setitem

def new_General_transform():
  return _VolumeIO_a.new_General_transform()
new_General_transform = _VolumeIO_a.new_General_transform

def free_General_transform(*args):
  return _VolumeIO_a.free_General_transform(*args)
free_General_transform = _VolumeIO_a.free_General_transform

def convert_voxel_to_value(*args):
  return _VolumeIO_a.convert_voxel_to_value(*args)
convert_voxel_to_value = _VolumeIO_a.convert_voxel_to_value

def convert_value_to_voxel(*args):
  return _VolumeIO_a.convert_value_to_voxel(*args)
convert_value_to_voxel = _VolumeIO_a.convert_value_to_voxel

def get_volume_voxel_value(*args):
  return _VolumeIO_a.get_volume_voxel_value(*args)
get_volume_voxel_value = _VolumeIO_a.get_volume_voxel_value

def get_volume_real_value(*args):
  return _VolumeIO_a.get_volume_real_value(*args)
get_volume_real_value = _VolumeIO_a.get_volume_real_value

def set_volume_voxel_value(*args):
  return _VolumeIO_a.set_volume_voxel_value(*args)
set_volume_voxel_value = _VolumeIO_a.set_volume_voxel_value

def set_volume_real_value(*args):
  return _VolumeIO_a.set_volume_real_value(*args)
set_volume_real_value = _VolumeIO_a.set_volume_real_value

def set_voxel_to_world_transform(*args):
  return _VolumeIO_a.set_voxel_to_world_transform(*args)
set_voxel_to_world_transform = _VolumeIO_a.set_voxel_to_world_transform

def get_voxel_to_world_transform(*args):
  return _VolumeIO_a.get_voxel_to_world_transform(*args)
get_voxel_to_world_transform = _VolumeIO_a.get_voxel_to_world_transform

def get_volume_total_n_voxels(*args):
  return _VolumeIO_a.get_volume_total_n_voxels(*args)
get_volume_total_n_voxels = _VolumeIO_a.get_volume_total_n_voxels

def get_volume_n_dimensions(*args):
  return _VolumeIO_a.get_volume_n_dimensions(*args)
get_volume_n_dimensions = _VolumeIO_a.get_volume_n_dimensions

def get_volume_space_type(*args):
  return _VolumeIO_a.get_volume_space_type(*args)
get_volume_space_type = _VolumeIO_a.get_volume_space_type

def set_volume_space_type(*args):
  return _VolumeIO_a.set_volume_space_type(*args)
set_volume_space_type = _VolumeIO_a.set_volume_space_type

def get_volume_voxel_min(*args):
  return _VolumeIO_a.get_volume_voxel_min(*args)
get_volume_voxel_min = _VolumeIO_a.get_volume_voxel_min

def get_volume_voxel_max(*args):
  return _VolumeIO_a.get_volume_voxel_max(*args)
get_volume_voxel_max = _VolumeIO_a.get_volume_voxel_max

def set_volume_voxel_range(*args):
  return _VolumeIO_a.set_volume_voxel_range(*args)
set_volume_voxel_range = _VolumeIO_a.set_volume_voxel_range

def get_volume_real_min(*args):
  return _VolumeIO_a.get_volume_real_min(*args)
get_volume_real_min = _VolumeIO_a.get_volume_real_min

def get_volume_real_max(*args):
  return _VolumeIO_a.get_volume_real_max(*args)
get_volume_real_max = _VolumeIO_a.get_volume_real_max

def set_volume_real_range(*args):
  return _VolumeIO_a.set_volume_real_range(*args)
set_volume_real_range = _VolumeIO_a.set_volume_real_range

def set_volume_type(*args):
  return _VolumeIO_a.set_volume_type(*args)
set_volume_type = _VolumeIO_a.set_volume_type

def get_volume_sizes(*args):
  return _VolumeIO_a.get_volume_sizes(*args)
get_volume_sizes = _VolumeIO_a.get_volume_sizes

def set_volume_sizes(*args):
  return _VolumeIO_a.set_volume_sizes(*args)
set_volume_sizes = _VolumeIO_a.set_volume_sizes

def get_volume_separations(*args):
  return _VolumeIO_a.get_volume_separations(*args)
get_volume_separations = _VolumeIO_a.get_volume_separations

def set_volume_separations(*args):
  return _VolumeIO_a.set_volume_separations(*args)
set_volume_separations = _VolumeIO_a.set_volume_separations

def set_volume_starts(*args):
  return _VolumeIO_a.set_volume_starts(*args)
set_volume_starts = _VolumeIO_a.set_volume_starts

def get_volume_starts(*args):
  return _VolumeIO_a.get_volume_starts(*args)
get_volume_starts = _VolumeIO_a.get_volume_starts

def set_volume_direction_unit_cosine(*args):
  return _VolumeIO_a.set_volume_direction_unit_cosine(*args)
set_volume_direction_unit_cosine = _VolumeIO_a.set_volume_direction_unit_cosine

def set_volume_direction_cosine(*args):
  return _VolumeIO_a.set_volume_direction_cosine(*args)
set_volume_direction_cosine = _VolumeIO_a.set_volume_direction_cosine

def get_volume_direction_cosine(*args):
  return _VolumeIO_a.get_volume_direction_cosine(*args)
get_volume_direction_cosine = _VolumeIO_a.get_volume_direction_cosine

def set_volume_translation(*args):
  return _VolumeIO_a.set_volume_translation(*args)
set_volume_translation = _VolumeIO_a.set_volume_translation

def get_volume_voxel_range(*args):
  return _VolumeIO_a.get_volume_voxel_range(*args)
get_volume_voxel_range = _VolumeIO_a.get_volume_voxel_range

def get_volume_real_range(*args):
  return _VolumeIO_a.get_volume_real_range(*args)
get_volume_real_range = _VolumeIO_a.get_volume_real_range

def set_n_bytes_cache_threshold(*args):
  return _VolumeIO_a.set_n_bytes_cache_threshold(*args)
set_n_bytes_cache_threshold = _VolumeIO_a.set_n_bytes_cache_threshold

def get_n_bytes_cache_threshold():
  return _VolumeIO_a.get_n_bytes_cache_threshold()
get_n_bytes_cache_threshold = _VolumeIO_a.get_n_bytes_cache_threshold

def copy_volume(*args):
  return _VolumeIO_a.copy_volume(*args)
copy_volume = _VolumeIO_a.copy_volume

def set_volume_cache_size(*args):
  return _VolumeIO_a.set_volume_cache_size(*args)
set_volume_cache_size = _VolumeIO_a.set_volume_cache_size

def set_default_max_bytes_in_cache(*args):
  return _VolumeIO_a.set_default_max_bytes_in_cache(*args)
set_default_max_bytes_in_cache = _VolumeIO_a.set_default_max_bytes_in_cache

def get_default_max_bytes_in_cache():
  return _VolumeIO_a.get_default_max_bytes_in_cache()
get_default_max_bytes_in_cache = _VolumeIO_a.get_default_max_bytes_in_cache

def volume_is_cached(*args):
  return _VolumeIO_a.volume_is_cached(*args)
volume_is_cached = _VolumeIO_a.volume_is_cached

def set_default_cache_block_sizes(*args):
  return _VolumeIO_a.set_default_cache_block_sizes(*args)
set_default_cache_block_sizes = _VolumeIO_a.set_default_cache_block_sizes

def set_volume_cache_block_sizes(*args):
  return _VolumeIO_a.set_volume_cache_block_sizes(*args)
set_volume_cache_block_sizes = _VolumeIO_a.set_volume_cache_block_sizes

def set_cache_block_sizes_hint(*args):
  return _VolumeIO_a.set_cache_block_sizes_hint(*args)
set_cache_block_sizes_hint = _VolumeIO_a.set_cache_block_sizes_hint

def create_volume(*args):
  return _VolumeIO_a.create_volume(*args)
create_volume = _VolumeIO_a.create_volume

def alloc_volume_data(*args):
  return _VolumeIO_a.alloc_volume_data(*args)
alloc_volume_data = _VolumeIO_a.alloc_volume_data

def convert_voxel_to_world(*args):
  return _VolumeIO_a.convert_voxel_to_world(*args)
convert_voxel_to_world = _VolumeIO_a.convert_voxel_to_world

def convert_world_to_voxel(*args):
  return _VolumeIO_a.convert_world_to_voxel(*args)
convert_world_to_voxel = _VolumeIO_a.convert_world_to_voxel

def get_volume_nc_data_type(*args):
  return _VolumeIO_a.get_volume_nc_data_type(*args)
get_volume_nc_data_type = _VolumeIO_a.get_volume_nc_data_type

def set_volume_interpolation_tolerance(*args):
  return _VolumeIO_a.set_volume_interpolation_tolerance(*args)
set_volume_interpolation_tolerance = _VolumeIO_a.set_volume_interpolation_tolerance

def evaluate_volume(*args):
  return _VolumeIO_a.evaluate_volume(*args)
evaluate_volume = _VolumeIO_a.evaluate_volume

def evaluate_volume_in_world(*args):
  return _VolumeIO_a.evaluate_volume_in_world(*args)
evaluate_volume_in_world = _VolumeIO_a.evaluate_volume_in_world

def convert_voxels_to_values(*args):
  return _VolumeIO_a.convert_voxels_to_values(*args)
convert_voxels_to_values = _VolumeIO_a.convert_voxels_to_values

def get_volume_value_hyperslab(*args):
  return _VolumeIO_a.get_volume_value_hyperslab(*args)
get_volume_value_hyperslab = _VolumeIO_a.get_volume_value_hyperslab

def get_volume_value_hyperslab_5d(*args):
  return _VolumeIO_a.get_volume_value_hyperslab_5d(*args)
get_volume_value_hyperslab_5d = _VolumeIO_a.get_volume_value_hyperslab_5d

def get_volume_value_hyperslab_4d(*args):
  return _VolumeIO_a.get_volume_value_hyperslab_4d(*args)
get_volume_value_hyperslab_4d = _VolumeIO_a.get_volume_value_hyperslab_4d

def get_volume_value_hyperslab_3d(*args):
  return _VolumeIO_a.get_volume_value_hyperslab_3d(*args)
get_volume_value_hyperslab_3d = _VolumeIO_a.get_volume_value_hyperslab_3d

def get_volume_value_hyperslab_2d(*args):
  return _VolumeIO_a.get_volume_value_hyperslab_2d(*args)
get_volume_value_hyperslab_2d = _VolumeIO_a.get_volume_value_hyperslab_2d

def get_volume_value_hyperslab_1d(*args):
  return _VolumeIO_a.get_volume_value_hyperslab_1d(*args)
get_volume_value_hyperslab_1d = _VolumeIO_a.get_volume_value_hyperslab_1d

def get_voxel_values_5d(*args):
  return _VolumeIO_a.get_voxel_values_5d(*args)
get_voxel_values_5d = _VolumeIO_a.get_voxel_values_5d

def get_voxel_values_4d(*args):
  return _VolumeIO_a.get_voxel_values_4d(*args)
get_voxel_values_4d = _VolumeIO_a.get_voxel_values_4d

def get_voxel_values_3d(*args):
  return _VolumeIO_a.get_voxel_values_3d(*args)
get_voxel_values_3d = _VolumeIO_a.get_voxel_values_3d

def get_voxel_values_2d(*args):
  return _VolumeIO_a.get_voxel_values_2d(*args)
get_voxel_values_2d = _VolumeIO_a.get_voxel_values_2d

def get_voxel_values_1d(*args):
  return _VolumeIO_a.get_voxel_values_1d(*args)
get_voxel_values_1d = _VolumeIO_a.get_voxel_values_1d

def get_volume_voxel_hyperslab_5d(*args):
  return _VolumeIO_a.get_volume_voxel_hyperslab_5d(*args)
get_volume_voxel_hyperslab_5d = _VolumeIO_a.get_volume_voxel_hyperslab_5d

def get_volume_voxel_hyperslab_4d(*args):
  return _VolumeIO_a.get_volume_voxel_hyperslab_4d(*args)
get_volume_voxel_hyperslab_4d = _VolumeIO_a.get_volume_voxel_hyperslab_4d

def get_volume_voxel_hyperslab_3d(*args):
  return _VolumeIO_a.get_volume_voxel_hyperslab_3d(*args)
get_volume_voxel_hyperslab_3d = _VolumeIO_a.get_volume_voxel_hyperslab_3d

def get_volume_voxel_hyperslab_2d(*args):
  return _VolumeIO_a.get_volume_voxel_hyperslab_2d(*args)
get_volume_voxel_hyperslab_2d = _VolumeIO_a.get_volume_voxel_hyperslab_2d

def get_volume_voxel_hyperslab_1d(*args):
  return _VolumeIO_a.get_volume_voxel_hyperslab_1d(*args)
get_volume_voxel_hyperslab_1d = _VolumeIO_a.get_volume_voxel_hyperslab_1d

def get_volume_voxel_hyperslab(*args):
  return _VolumeIO_a.get_volume_voxel_hyperslab(*args)
get_volume_voxel_hyperslab = _VolumeIO_a.get_volume_voxel_hyperslab

def initialize_free_format_input(*args):
  return _VolumeIO_a.initialize_free_format_input(*args)
initialize_free_format_input = _VolumeIO_a.initialize_free_format_input

def delete_free_format_input(*args):
  return _VolumeIO_a.delete_free_format_input(*args)
delete_free_format_input = _VolumeIO_a.delete_free_format_input

def input_more_free_format_file(*args):
  return _VolumeIO_a.input_more_free_format_file(*args)
input_more_free_format_file = _VolumeIO_a.input_more_free_format_file

def get_minc_file_n_dimensions(*args):
  return _VolumeIO_a.get_minc_file_n_dimensions(*args)
get_minc_file_n_dimensions = _VolumeIO_a.get_minc_file_n_dimensions

def initialize_minc_input_from_minc_id(*args):
  return _VolumeIO_a.initialize_minc_input_from_minc_id(*args)
initialize_minc_input_from_minc_id = _VolumeIO_a.initialize_minc_input_from_minc_id

def initialize_minc_input(*args):
  return _VolumeIO_a.initialize_minc_input(*args)
initialize_minc_input = _VolumeIO_a.initialize_minc_input

def get_n_input_volumes(*args):
  return _VolumeIO_a.get_n_input_volumes(*args)
get_n_input_volumes = _VolumeIO_a.get_n_input_volumes

def close_minc_input(*args):
  return _VolumeIO_a.close_minc_input(*args)
close_minc_input = _VolumeIO_a.close_minc_input

def input_minc_hyperslab(*args):
  return _VolumeIO_a.input_minc_hyperslab(*args)
input_minc_hyperslab = _VolumeIO_a.input_minc_hyperslab

def input_more_minc_file(*args):
  return _VolumeIO_a.input_more_minc_file(*args)
input_more_minc_file = _VolumeIO_a.input_more_minc_file

def advance_input_volume(*args):
  return _VolumeIO_a.advance_input_volume(*args)
advance_input_volume = _VolumeIO_a.advance_input_volume

def reset_input_volume(*args):
  return _VolumeIO_a.reset_input_volume(*args)
reset_input_volume = _VolumeIO_a.reset_input_volume

def get_minc_file_id(*args):
  return _VolumeIO_a.get_minc_file_id(*args)
get_minc_file_id = _VolumeIO_a.get_minc_file_id

def set_default_minc_input_options(*args):
  return _VolumeIO_a.set_default_minc_input_options(*args)
set_default_minc_input_options = _VolumeIO_a.set_default_minc_input_options

def set_minc_input_promote_invalid_to_zero_flag(*args):
  return _VolumeIO_a.set_minc_input_promote_invalid_to_zero_flag(*args)
set_minc_input_promote_invalid_to_zero_flag = _VolumeIO_a.set_minc_input_promote_invalid_to_zero_flag

def set_minc_input_promote_invalid_to_min_flag(*args):
  return _VolumeIO_a.set_minc_input_promote_invalid_to_min_flag(*args)
set_minc_input_promote_invalid_to_min_flag = _VolumeIO_a.set_minc_input_promote_invalid_to_min_flag

def set_minc_input_vector_to_scalar_flag(*args):
  return _VolumeIO_a.set_minc_input_vector_to_scalar_flag(*args)
set_minc_input_vector_to_scalar_flag = _VolumeIO_a.set_minc_input_vector_to_scalar_flag

def set_minc_input_vector_to_colour_flag(*args):
  return _VolumeIO_a.set_minc_input_vector_to_colour_flag(*args)
set_minc_input_vector_to_colour_flag = _VolumeIO_a.set_minc_input_vector_to_colour_flag

def set_minc_input_colour_dimension_size(*args):
  return _VolumeIO_a.set_minc_input_colour_dimension_size(*args)
set_minc_input_colour_dimension_size = _VolumeIO_a.set_minc_input_colour_dimension_size

def set_minc_input_colour_max_dimension_size(*args):
  return _VolumeIO_a.set_minc_input_colour_max_dimension_size(*args)
set_minc_input_colour_max_dimension_size = _VolumeIO_a.set_minc_input_colour_max_dimension_size

def set_minc_input_colour_indices(*args):
  return _VolumeIO_a.set_minc_input_colour_indices(*args)
set_minc_input_colour_indices = _VolumeIO_a.set_minc_input_colour_indices

def start_volume_input(*args):
  return _VolumeIO_a.start_volume_input(*args)
start_volume_input = _VolumeIO_a.start_volume_input

def delete_volume_input(*args):
  return _VolumeIO_a.delete_volume_input(*args)
delete_volume_input = _VolumeIO_a.delete_volume_input

def input_more_of_volume(*args):
  return _VolumeIO_a.input_more_of_volume(*args)
input_more_of_volume = _VolumeIO_a.input_more_of_volume

def cancel_volume_input(*args):
  return _VolumeIO_a.cancel_volume_input(*args)
cancel_volume_input = _VolumeIO_a.cancel_volume_input

def input_volume(*args):
  return _VolumeIO_a.input_volume(*args)
input_volume = _VolumeIO_a.input_volume

def get_volume_input_minc_file(*args):
  return _VolumeIO_a.get_volume_input_minc_file(*args)
get_volume_input_minc_file = _VolumeIO_a.get_volume_input_minc_file

def create_empty_multidim_array(*args):
  return _VolumeIO_a.create_empty_multidim_array(*args)
create_empty_multidim_array = _VolumeIO_a.create_empty_multidim_array

def get_multidim_data_type(*args):
  return _VolumeIO_a.get_multidim_data_type(*args)
get_multidim_data_type = _VolumeIO_a.get_multidim_data_type

def set_multidim_data_type(*args):
  return _VolumeIO_a.set_multidim_data_type(*args)
set_multidim_data_type = _VolumeIO_a.set_multidim_data_type

def get_type_size(*args):
  return _VolumeIO_a.get_type_size(*args)
get_type_size = _VolumeIO_a.get_type_size

def get_type_range(*args):
  return _VolumeIO_a.get_type_range(*args)
get_type_range = _VolumeIO_a.get_type_range

def set_multidim_sizes(*args):
  return _VolumeIO_a.set_multidim_sizes(*args)
set_multidim_sizes = _VolumeIO_a.set_multidim_sizes

def get_multidim_sizes(*args):
  return _VolumeIO_a.get_multidim_sizes(*args)
get_multidim_sizes = _VolumeIO_a.get_multidim_sizes

def multidim_array_is_alloced(*args):
  return _VolumeIO_a.multidim_array_is_alloced(*args)
multidim_array_is_alloced = _VolumeIO_a.multidim_array_is_alloced

def alloc_multidim_array(*args):
  return _VolumeIO_a.alloc_multidim_array(*args)
alloc_multidim_array = _VolumeIO_a.alloc_multidim_array

def create_multidim_array(*args):
  return _VolumeIO_a.create_multidim_array(*args)
create_multidim_array = _VolumeIO_a.create_multidim_array

def delete_multidim_array(*args):
  return _VolumeIO_a.delete_multidim_array(*args)
delete_multidim_array = _VolumeIO_a.delete_multidim_array

def get_multidim_n_dimensions(*args):
  return _VolumeIO_a.get_multidim_n_dimensions(*args)
get_multidim_n_dimensions = _VolumeIO_a.get_multidim_n_dimensions

def copy_multidim_data_reordered(*args):
  return _VolumeIO_a.copy_multidim_data_reordered(*args)
copy_multidim_data_reordered = _VolumeIO_a.copy_multidim_data_reordered

def copy_multidim_reordered(*args):
  return _VolumeIO_a.copy_multidim_reordered(*args)
copy_multidim_reordered = _VolumeIO_a.copy_multidim_reordered

def initialize_minc_output(*args):
  return _VolumeIO_a.initialize_minc_output(*args)
initialize_minc_output = _VolumeIO_a.initialize_minc_output

def copy_auxiliary_data_from_minc_file(*args):
  return _VolumeIO_a.copy_auxiliary_data_from_minc_file(*args)
copy_auxiliary_data_from_minc_file = _VolumeIO_a.copy_auxiliary_data_from_minc_file

def copy_auxiliary_data_from_open_minc_file(*args):
  return _VolumeIO_a.copy_auxiliary_data_from_open_minc_file(*args)
copy_auxiliary_data_from_open_minc_file = _VolumeIO_a.copy_auxiliary_data_from_open_minc_file

def add_minc_history(*args):
  return _VolumeIO_a.add_minc_history(*args)
add_minc_history = _VolumeIO_a.add_minc_history

def set_minc_output_random_order(*args):
  return _VolumeIO_a.set_minc_output_random_order(*args)
set_minc_output_random_order = _VolumeIO_a.set_minc_output_random_order

def output_minc_hyperslab(*args):
  return _VolumeIO_a.output_minc_hyperslab(*args)
output_minc_hyperslab = _VolumeIO_a.output_minc_hyperslab

def output_volume_to_minc_file_position(*args):
  return _VolumeIO_a.output_volume_to_minc_file_position(*args)
output_volume_to_minc_file_position = _VolumeIO_a.output_volume_to_minc_file_position

def output_minc_volume(*args):
  return _VolumeIO_a.output_minc_volume(*args)
output_minc_volume = _VolumeIO_a.output_minc_volume

def close_minc_output(*args):
  return _VolumeIO_a.close_minc_output(*args)
close_minc_output = _VolumeIO_a.close_minc_output

def set_default_minc_output_options(*args):
  return _VolumeIO_a.set_default_minc_output_options(*args)
set_default_minc_output_options = _VolumeIO_a.set_default_minc_output_options

def copy_minc_output_options(*args):
  return _VolumeIO_a.copy_minc_output_options(*args)
copy_minc_output_options = _VolumeIO_a.copy_minc_output_options

def delete_minc_output_options(*args):
  return _VolumeIO_a.delete_minc_output_options(*args)
delete_minc_output_options = _VolumeIO_a.delete_minc_output_options

def set_minc_output_dimensions_order(*args):
  return _VolumeIO_a.set_minc_output_dimensions_order(*args)
set_minc_output_dimensions_order = _VolumeIO_a.set_minc_output_dimensions_order

def set_minc_output_real_range(*args):
  return _VolumeIO_a.set_minc_output_real_range(*args)
set_minc_output_real_range = _VolumeIO_a.set_minc_output_real_range

def set_minc_output_use_volume_starts_and_steps_flag(*args):
  return _VolumeIO_a.set_minc_output_use_volume_starts_and_steps_flag(*args)
set_minc_output_use_volume_starts_and_steps_flag = _VolumeIO_a.set_minc_output_use_volume_starts_and_steps_flag

def get_file_dimension_names(*args):
  return _VolumeIO_a.get_file_dimension_names(*args)
get_file_dimension_names = _VolumeIO_a.get_file_dimension_names

def create_output_dim_names(*args):
  return _VolumeIO_a.create_output_dim_names(*args)
create_output_dim_names = _VolumeIO_a.create_output_dim_names

def copy_volume_auxiliary_and_history(*args):
  return _VolumeIO_a.copy_volume_auxiliary_and_history(*args)
copy_volume_auxiliary_and_history = _VolumeIO_a.copy_volume_auxiliary_and_history

def output_modified_volume(*args):
  return _VolumeIO_a.output_modified_volume(*args)
output_modified_volume = _VolumeIO_a.output_modified_volume

def output_volume(*args):
  return _VolumeIO_a.output_volume(*args)
output_volume = _VolumeIO_a.output_volume

def convert_values_to_voxels(*args):
  return _VolumeIO_a.convert_values_to_voxels(*args)
convert_values_to_voxels = _VolumeIO_a.convert_values_to_voxels

def set_volume_value_hyperslab(*args):
  return _VolumeIO_a.set_volume_value_hyperslab(*args)
set_volume_value_hyperslab = _VolumeIO_a.set_volume_value_hyperslab

def set_volume_value_hyperslab_5d(*args):
  return _VolumeIO_a.set_volume_value_hyperslab_5d(*args)
set_volume_value_hyperslab_5d = _VolumeIO_a.set_volume_value_hyperslab_5d

def set_volume_value_hyperslab_4d(*args):
  return _VolumeIO_a.set_volume_value_hyperslab_4d(*args)
set_volume_value_hyperslab_4d = _VolumeIO_a.set_volume_value_hyperslab_4d

def set_volume_value_hyperslab_3d(*args):
  return _VolumeIO_a.set_volume_value_hyperslab_3d(*args)
set_volume_value_hyperslab_3d = _VolumeIO_a.set_volume_value_hyperslab_3d

def set_volume_value_hyperslab_2d(*args):
  return _VolumeIO_a.set_volume_value_hyperslab_2d(*args)
set_volume_value_hyperslab_2d = _VolumeIO_a.set_volume_value_hyperslab_2d

def set_volume_value_hyperslab_1d(*args):
  return _VolumeIO_a.set_volume_value_hyperslab_1d(*args)
set_volume_value_hyperslab_1d = _VolumeIO_a.set_volume_value_hyperslab_1d

def set_volume_voxel_hyperslab_5d(*args):
  return _VolumeIO_a.set_volume_voxel_hyperslab_5d(*args)
set_volume_voxel_hyperslab_5d = _VolumeIO_a.set_volume_voxel_hyperslab_5d

def set_volume_voxel_hyperslab_4d(*args):
  return _VolumeIO_a.set_volume_voxel_hyperslab_4d(*args)
set_volume_voxel_hyperslab_4d = _VolumeIO_a.set_volume_voxel_hyperslab_4d

def set_volume_voxel_hyperslab_3d(*args):
  return _VolumeIO_a.set_volume_voxel_hyperslab_3d(*args)
set_volume_voxel_hyperslab_3d = _VolumeIO_a.set_volume_voxel_hyperslab_3d

def set_volume_voxel_hyperslab_2d(*args):
  return _VolumeIO_a.set_volume_voxel_hyperslab_2d(*args)
set_volume_voxel_hyperslab_2d = _VolumeIO_a.set_volume_voxel_hyperslab_2d

def set_volume_voxel_hyperslab_1d(*args):
  return _VolumeIO_a.set_volume_voxel_hyperslab_1d(*args)
set_volume_voxel_hyperslab_1d = _VolumeIO_a.set_volume_voxel_hyperslab_1d

def set_volume_voxel_hyperslab(*args):
  return _VolumeIO_a.set_volume_voxel_hyperslab(*args)
set_volume_voxel_hyperslab = _VolumeIO_a.set_volume_voxel_hyperslab

def initialize_volume_cache(*args):
  return _VolumeIO_a.initialize_volume_cache(*args)
initialize_volume_cache = _VolumeIO_a.initialize_volume_cache

def volume_cache_is_alloced(*args):
  return _VolumeIO_a.volume_cache_is_alloced(*args)
volume_cache_is_alloced = _VolumeIO_a.volume_cache_is_alloced

def flush_volume_cache(*args):
  return _VolumeIO_a.flush_volume_cache(*args)
flush_volume_cache = _VolumeIO_a.flush_volume_cache

def delete_volume_cache(*args):
  return _VolumeIO_a.delete_volume_cache(*args)
delete_volume_cache = _VolumeIO_a.delete_volume_cache

def set_cache_output_volume_parameters(*args):
  return _VolumeIO_a.set_cache_output_volume_parameters(*args)
set_cache_output_volume_parameters = _VolumeIO_a.set_cache_output_volume_parameters

def open_cache_volume_input_file(*args):
  return _VolumeIO_a.open_cache_volume_input_file(*args)
open_cache_volume_input_file = _VolumeIO_a.open_cache_volume_input_file

def cache_volume_range_has_changed(*args):
  return _VolumeIO_a.cache_volume_range_has_changed(*args)
cache_volume_range_has_changed = _VolumeIO_a.cache_volume_range_has_changed

def set_cache_volume_file_offset(*args):
  return _VolumeIO_a.set_cache_volume_file_offset(*args)
set_cache_volume_file_offset = _VolumeIO_a.set_cache_volume_file_offset

def get_cached_volume_voxel(*args):
  return _VolumeIO_a.get_cached_volume_voxel(*args)
get_cached_volume_voxel = _VolumeIO_a.get_cached_volume_voxel

def set_cached_volume_voxel(*args):
  return _VolumeIO_a.set_cached_volume_voxel(*args)
set_cached_volume_voxel = _VolumeIO_a.set_cached_volume_voxel

def cached_volume_has_been_modified(*args):
  return _VolumeIO_a.cached_volume_has_been_modified(*args)
cached_volume_has_been_modified = _VolumeIO_a.cached_volume_has_been_modified

def set_volume_cache_debugging(*args):
  return _VolumeIO_a.set_volume_cache_debugging(*args)
set_volume_cache_debugging = _VolumeIO_a.set_volume_cache_debugging

def get_default_dim_names(*args):
  return _VolumeIO_a.get_default_dim_names(*args)
get_default_dim_names = _VolumeIO_a.get_default_dim_names

def convert_dim_name_to_spatial_axis(*args):
  return _VolumeIO_a.convert_dim_name_to_spatial_axis(*args)
convert_dim_name_to_spatial_axis = _VolumeIO_a.convert_dim_name_to_spatial_axis

def get_volume_data_type(*args):
  return _VolumeIO_a.get_volume_data_type(*args)
get_volume_data_type = _VolumeIO_a.get_volume_data_type

def set_rgb_volume_flag(*args):
  return _VolumeIO_a.set_rgb_volume_flag(*args)
set_rgb_volume_flag = _VolumeIO_a.set_rgb_volume_flag

def is_an_rgb_volume(*args):
  return _VolumeIO_a.is_an_rgb_volume(*args)
is_an_rgb_volume = _VolumeIO_a.is_an_rgb_volume

def volume_is_alloced(*args):
  return _VolumeIO_a.volume_is_alloced(*args)
volume_is_alloced = _VolumeIO_a.volume_is_alloced

def free_volume_data(*args):
  return _VolumeIO_a.free_volume_data(*args)
free_volume_data = _VolumeIO_a.free_volume_data

def delete_volume(*args):
  return _VolumeIO_a.delete_volume(*args)
delete_volume = _VolumeIO_a.delete_volume

def compute_world_transform(*args):
  return _VolumeIO_a.compute_world_transform(*args)
compute_world_transform = _VolumeIO_a.compute_world_transform

def convert_transform_to_starts_and_steps(*args):
  return _VolumeIO_a.convert_transform_to_starts_and_steps(*args)
convert_transform_to_starts_and_steps = _VolumeIO_a.convert_transform_to_starts_and_steps

def get_volume_dimension_names(*args):
  return _VolumeIO_a.get_volume_dimension_names(*args)
get_volume_dimension_names = _VolumeIO_a.get_volume_dimension_names

def delete_dimension_names(*args):
  return _VolumeIO_a.delete_dimension_names(*args)
delete_dimension_names = _VolumeIO_a.delete_dimension_names

def reorder_voxel_to_xyz(*args):
  return _VolumeIO_a.reorder_voxel_to_xyz(*args)
reorder_voxel_to_xyz = _VolumeIO_a.reorder_voxel_to_xyz

def reorder_xyz_to_voxel(*args):
  return _VolumeIO_a.reorder_xyz_to_voxel(*args)
reorder_xyz_to_voxel = _VolumeIO_a.reorder_xyz_to_voxel

def convert_3D_voxel_to_world(*args):
  return _VolumeIO_a.convert_3D_voxel_to_world(*args)
convert_3D_voxel_to_world = _VolumeIO_a.convert_3D_voxel_to_world

def convert_voxel_normal_vector_to_world(*args):
  return _VolumeIO_a.convert_voxel_normal_vector_to_world(*args)
convert_voxel_normal_vector_to_world = _VolumeIO_a.convert_voxel_normal_vector_to_world

def convert_voxel_vector_to_world(*args):
  return _VolumeIO_a.convert_voxel_vector_to_world(*args)
convert_voxel_vector_to_world = _VolumeIO_a.convert_voxel_vector_to_world

def convert_world_vector_to_voxel(*args):
  return _VolumeIO_a.convert_world_vector_to_voxel(*args)
convert_world_vector_to_voxel = _VolumeIO_a.convert_world_vector_to_voxel

def convert_3D_world_to_voxel(*args):
  return _VolumeIO_a.convert_3D_world_to_voxel(*args)
convert_3D_world_to_voxel = _VolumeIO_a.convert_3D_world_to_voxel

def copy_volume_definition_no_alloc(*args):
  return _VolumeIO_a.copy_volume_definition_no_alloc(*args)
copy_volume_definition_no_alloc = _VolumeIO_a.copy_volume_definition_no_alloc

def copy_volume_definition(*args):
  return _VolumeIO_a.copy_volume_definition(*args)
copy_volume_definition = _VolumeIO_a.copy_volume_definition

def grid_transform_point(*args):
  return _VolumeIO_a.grid_transform_point(*args)
grid_transform_point = _VolumeIO_a.grid_transform_point

def grid_inverse_transform_point(*args):
  return _VolumeIO_a.grid_inverse_transform_point(*args)
grid_inverse_transform_point = _VolumeIO_a.grid_inverse_transform_point

def mni_get_nonwhite_character(*args):
  return _VolumeIO_a.mni_get_nonwhite_character(*args)
mni_get_nonwhite_character = _VolumeIO_a.mni_get_nonwhite_character

def mni_skip_expected_character(*args):
  return _VolumeIO_a.mni_skip_expected_character(*args)
mni_skip_expected_character = _VolumeIO_a.mni_skip_expected_character

def mni_input_line(*args):
  return _VolumeIO_a.mni_input_line(*args)
mni_input_line = _VolumeIO_a.mni_input_line

def mni_input_string(*args):
  return _VolumeIO_a.mni_input_string(*args)
mni_input_string = _VolumeIO_a.mni_input_string

def mni_input_keyword_and_equal_sign(*args):
  return _VolumeIO_a.mni_input_keyword_and_equal_sign(*args)
mni_input_keyword_and_equal_sign = _VolumeIO_a.mni_input_keyword_and_equal_sign

def mni_input_real(*args):
  return _VolumeIO_a.mni_input_real(*args)
mni_input_real = _VolumeIO_a.mni_input_real

def mni_input_reals(*args):
  return _VolumeIO_a.mni_input_reals(*args)
mni_input_reals = _VolumeIO_a.mni_input_reals

def mni_input_int(*args):
  return _VolumeIO_a.mni_input_int(*args)
mni_input_int = _VolumeIO_a.mni_input_int

def output_comments(*args):
  return _VolumeIO_a.output_comments(*args)
output_comments = _VolumeIO_a.output_comments

def get_default_tag_file_suffix():
  return _VolumeIO_a.get_default_tag_file_suffix()
get_default_tag_file_suffix = _VolumeIO_a.get_default_tag_file_suffix

def initialize_tag_file_output(*args):
  return _VolumeIO_a.initialize_tag_file_output(*args)
initialize_tag_file_output = _VolumeIO_a.initialize_tag_file_output

def output_one_tag(*args):
  return _VolumeIO_a.output_one_tag(*args)
output_one_tag = _VolumeIO_a.output_one_tag

def terminate_tag_file_output(*args):
  return _VolumeIO_a.terminate_tag_file_output(*args)
terminate_tag_file_output = _VolumeIO_a.terminate_tag_file_output

def output_tag_points(*args):
  return _VolumeIO_a.output_tag_points(*args)
output_tag_points = _VolumeIO_a.output_tag_points

def free_tag_points(*args):
  return _VolumeIO_a.free_tag_points(*args)
free_tag_points = _VolumeIO_a.free_tag_points

def initialize_tag_file_input(*args):
  return _VolumeIO_a.initialize_tag_file_input(*args)
initialize_tag_file_input = _VolumeIO_a.initialize_tag_file_input

def output_tag_file(*args):
  return _VolumeIO_a.output_tag_file(*args)
output_tag_file = _VolumeIO_a.output_tag_file

def input_tag_file(*args):
  return _VolumeIO_a.input_tag_file(*args)
input_tag_file = _VolumeIO_a.input_tag_file

def input_one_tag(*args):
  return _VolumeIO_a.input_one_tag(*args)
input_one_tag = _VolumeIO_a.input_one_tag

def input_tag_points(*args):
  return _VolumeIO_a.input_tag_points(*args)
input_tag_points = _VolumeIO_a.input_tag_points

def evaluate_thin_plate_spline(*args):
  return _VolumeIO_a.evaluate_thin_plate_spline(*args)
evaluate_thin_plate_spline = _VolumeIO_a.evaluate_thin_plate_spline

def thin_plate_spline_transform(*args):
  return _VolumeIO_a.thin_plate_spline_transform(*args)
thin_plate_spline_transform = _VolumeIO_a.thin_plate_spline_transform

def thin_plate_spline_inverse_transform(*args):
  return _VolumeIO_a.thin_plate_spline_inverse_transform(*args)
thin_plate_spline_inverse_transform = _VolumeIO_a.thin_plate_spline_inverse_transform

def thin_plate_spline_U(*args):
  return _VolumeIO_a.thin_plate_spline_U(*args)
thin_plate_spline_U = _VolumeIO_a.thin_plate_spline_U

def get_default_transform_file_suffix():
  return _VolumeIO_a.get_default_transform_file_suffix()
get_default_transform_file_suffix = _VolumeIO_a.get_default_transform_file_suffix

def output_transform(*args):
  return _VolumeIO_a.output_transform(*args)
output_transform = _VolumeIO_a.output_transform

def input_transform(*args):
  return _VolumeIO_a.input_transform(*args)
input_transform = _VolumeIO_a.input_transform

def output_transform_file(*args):
  return _VolumeIO_a.output_transform_file(*args)
output_transform_file = _VolumeIO_a.output_transform_file

def input_transform_file(*args):
  return _VolumeIO_a.input_transform_file(*args)
input_transform_file = _VolumeIO_a.input_transform_file

def create_linear_transform(*args):
  return _VolumeIO_a.create_linear_transform(*args)
create_linear_transform = _VolumeIO_a.create_linear_transform

def create_thin_plate_transform_real(*args):
  return _VolumeIO_a.create_thin_plate_transform_real(*args)
create_thin_plate_transform_real = _VolumeIO_a.create_thin_plate_transform_real

def create_thin_plate_transform(*args):
  return _VolumeIO_a.create_thin_plate_transform(*args)
create_thin_plate_transform = _VolumeIO_a.create_thin_plate_transform

def create_grid_transform(*args):
  return _VolumeIO_a.create_grid_transform(*args)
create_grid_transform = _VolumeIO_a.create_grid_transform

def create_grid_transform_no_copy(*args):
  return _VolumeIO_a.create_grid_transform_no_copy(*args)
create_grid_transform_no_copy = _VolumeIO_a.create_grid_transform_no_copy

def create_user_transform(*args):
  return _VolumeIO_a.create_user_transform(*args)
create_user_transform = _VolumeIO_a.create_user_transform

def get_transform_type(*args):
  return _VolumeIO_a.get_transform_type(*args)
get_transform_type = _VolumeIO_a.get_transform_type

def get_n_concated_transforms(*args):
  return _VolumeIO_a.get_n_concated_transforms(*args)
get_n_concated_transforms = _VolumeIO_a.get_n_concated_transforms

def get_nth_general_transform(*args):
  return _VolumeIO_a.get_nth_general_transform(*args)
get_nth_general_transform = _VolumeIO_a.get_nth_general_transform

def get_linear_transform_ptr(*args):
  return _VolumeIO_a.get_linear_transform_ptr(*args)
get_linear_transform_ptr = _VolumeIO_a.get_linear_transform_ptr

def get_inverse_linear_transform_ptr(*args):
  return _VolumeIO_a.get_inverse_linear_transform_ptr(*args)
get_inverse_linear_transform_ptr = _VolumeIO_a.get_inverse_linear_transform_ptr

def general_transform_point(*args):
  return _VolumeIO_a.general_transform_point(*args)
general_transform_point = _VolumeIO_a.general_transform_point

def general_inverse_transform_point(*args):
  return _VolumeIO_a.general_inverse_transform_point(*args)
general_inverse_transform_point = _VolumeIO_a.general_inverse_transform_point

def copy_general_transform(*args):
  return _VolumeIO_a.copy_general_transform(*args)
copy_general_transform = _VolumeIO_a.copy_general_transform

def invert_general_transform(*args):
  return _VolumeIO_a.invert_general_transform(*args)
invert_general_transform = _VolumeIO_a.invert_general_transform

def create_inverse_general_transform(*args):
  return _VolumeIO_a.create_inverse_general_transform(*args)
create_inverse_general_transform = _VolumeIO_a.create_inverse_general_transform

def concat_general_transforms(*args):
  return _VolumeIO_a.concat_general_transforms(*args)
concat_general_transforms = _VolumeIO_a.concat_general_transforms

def delete_general_transform(*args):
  return _VolumeIO_a.delete_general_transform(*args)
delete_general_transform = _VolumeIO_a.delete_general_transform

def make_rgba_Colour(*args):
  return _VolumeIO_a.make_rgba_Colour(*args)
make_rgba_Colour = _VolumeIO_a.make_rgba_Colour

def get_Colour_r(*args):
  return _VolumeIO_a.get_Colour_r(*args)
get_Colour_r = _VolumeIO_a.get_Colour_r

def get_Colour_g(*args):
  return _VolumeIO_a.get_Colour_g(*args)
get_Colour_g = _VolumeIO_a.get_Colour_g

def get_Colour_b(*args):
  return _VolumeIO_a.get_Colour_b(*args)
get_Colour_b = _VolumeIO_a.get_Colour_b

def get_Colour_a(*args):
  return _VolumeIO_a.get_Colour_a(*args)
get_Colour_a = _VolumeIO_a.get_Colour_a

def make_Colour(*args):
  return _VolumeIO_a.make_Colour(*args)
make_Colour = _VolumeIO_a.make_Colour

def get_Colour_r_0_1(*args):
  return _VolumeIO_a.get_Colour_r_0_1(*args)
get_Colour_r_0_1 = _VolumeIO_a.get_Colour_r_0_1

def get_Colour_g_0_1(*args):
  return _VolumeIO_a.get_Colour_g_0_1(*args)
get_Colour_g_0_1 = _VolumeIO_a.get_Colour_g_0_1

def get_Colour_b_0_1(*args):
  return _VolumeIO_a.get_Colour_b_0_1(*args)
get_Colour_b_0_1 = _VolumeIO_a.get_Colour_b_0_1

def get_Colour_a_0_1(*args):
  return _VolumeIO_a.get_Colour_a_0_1(*args)
get_Colour_a_0_1 = _VolumeIO_a.get_Colour_a_0_1

def make_Colour_0_1(*args):
  return _VolumeIO_a.make_Colour_0_1(*args)
make_Colour_0_1 = _VolumeIO_a.make_Colour_0_1

def make_rgba_Colour_0_1(*args):
  return _VolumeIO_a.make_rgba_Colour_0_1(*args)
make_rgba_Colour_0_1 = _VolumeIO_a.make_rgba_Colour_0_1

def scaled_maximal_pivoting_gaussian_elimination(*args):
  return _VolumeIO_a.scaled_maximal_pivoting_gaussian_elimination(*args)
scaled_maximal_pivoting_gaussian_elimination = _VolumeIO_a.scaled_maximal_pivoting_gaussian_elimination

def solve_linear_system(*args):
  return _VolumeIO_a.solve_linear_system(*args)
solve_linear_system = _VolumeIO_a.solve_linear_system

def invert_square_matrix(*args):
  return _VolumeIO_a.invert_square_matrix(*args)
invert_square_matrix = _VolumeIO_a.invert_square_matrix

def create_orthogonal_vector(*args):
  return _VolumeIO_a.create_orthogonal_vector(*args)
create_orthogonal_vector = _VolumeIO_a.create_orthogonal_vector

def create_two_orthogonal_vectors(*args):
  return _VolumeIO_a.create_two_orthogonal_vectors(*args)
create_two_orthogonal_vectors = _VolumeIO_a.create_two_orthogonal_vectors

def compute_transform_inverse(*args):
  return _VolumeIO_a.compute_transform_inverse(*args)
compute_transform_inverse = _VolumeIO_a.compute_transform_inverse

def get_linear_spline_coefs(*args):
  return _VolumeIO_a.get_linear_spline_coefs(*args)
get_linear_spline_coefs = _VolumeIO_a.get_linear_spline_coefs

def get_quadratic_spline_coefs(*args):
  return _VolumeIO_a.get_quadratic_spline_coefs(*args)
get_quadratic_spline_coefs = _VolumeIO_a.get_quadratic_spline_coefs

def get_cubic_spline_coefs(*args):
  return _VolumeIO_a.get_cubic_spline_coefs(*args)
get_cubic_spline_coefs = _VolumeIO_a.get_cubic_spline_coefs

def cubic_interpolate(*args):
  return _VolumeIO_a.cubic_interpolate(*args)
cubic_interpolate = _VolumeIO_a.cubic_interpolate

def evaluate_univariate_interpolating_spline(*args):
  return _VolumeIO_a.evaluate_univariate_interpolating_spline(*args)
evaluate_univariate_interpolating_spline = _VolumeIO_a.evaluate_univariate_interpolating_spline

def evaluate_bivariate_interpolating_spline(*args):
  return _VolumeIO_a.evaluate_bivariate_interpolating_spline(*args)
evaluate_bivariate_interpolating_spline = _VolumeIO_a.evaluate_bivariate_interpolating_spline

def evaluate_trivariate_interpolating_spline(*args):
  return _VolumeIO_a.evaluate_trivariate_interpolating_spline(*args)
evaluate_trivariate_interpolating_spline = _VolumeIO_a.evaluate_trivariate_interpolating_spline

def evaluate_interpolating_spline(*args):
  return _VolumeIO_a.evaluate_interpolating_spline(*args)
evaluate_interpolating_spline = _VolumeIO_a.evaluate_interpolating_spline

def spline_tensor_product(*args):
  return _VolumeIO_a.spline_tensor_product(*args)
spline_tensor_product = _VolumeIO_a.spline_tensor_product

def make_identity_transform(*args):
  return _VolumeIO_a.make_identity_transform(*args)
make_identity_transform = _VolumeIO_a.make_identity_transform

def close_to_identity(*args):
  return _VolumeIO_a.close_to_identity(*args)
close_to_identity = _VolumeIO_a.close_to_identity

def get_transform_origin(*args):
  return _VolumeIO_a.get_transform_origin(*args)
get_transform_origin = _VolumeIO_a.get_transform_origin

def set_transform_origin(*args):
  return _VolumeIO_a.set_transform_origin(*args)
set_transform_origin = _VolumeIO_a.set_transform_origin

def get_transform_origin_real(*args):
  return _VolumeIO_a.get_transform_origin_real(*args)
get_transform_origin_real = _VolumeIO_a.get_transform_origin_real

def get_transform_x_axis(*args):
  return _VolumeIO_a.get_transform_x_axis(*args)
get_transform_x_axis = _VolumeIO_a.get_transform_x_axis

def get_transform_x_axis_real(*args):
  return _VolumeIO_a.get_transform_x_axis_real(*args)
get_transform_x_axis_real = _VolumeIO_a.get_transform_x_axis_real

def set_transform_x_axis(*args):
  return _VolumeIO_a.set_transform_x_axis(*args)
set_transform_x_axis = _VolumeIO_a.set_transform_x_axis

def set_transform_x_axis_real(*args):
  return _VolumeIO_a.set_transform_x_axis_real(*args)
set_transform_x_axis_real = _VolumeIO_a.set_transform_x_axis_real

def get_transform_y_axis(*args):
  return _VolumeIO_a.get_transform_y_axis(*args)
get_transform_y_axis = _VolumeIO_a.get_transform_y_axis

def get_transform_y_axis_real(*args):
  return _VolumeIO_a.get_transform_y_axis_real(*args)
get_transform_y_axis_real = _VolumeIO_a.get_transform_y_axis_real

def set_transform_y_axis(*args):
  return _VolumeIO_a.set_transform_y_axis(*args)
set_transform_y_axis = _VolumeIO_a.set_transform_y_axis

def set_transform_y_axis_real(*args):
  return _VolumeIO_a.set_transform_y_axis_real(*args)
set_transform_y_axis_real = _VolumeIO_a.set_transform_y_axis_real

def get_transform_z_axis(*args):
  return _VolumeIO_a.get_transform_z_axis(*args)
get_transform_z_axis = _VolumeIO_a.get_transform_z_axis

def get_transform_z_axis_real(*args):
  return _VolumeIO_a.get_transform_z_axis_real(*args)
get_transform_z_axis_real = _VolumeIO_a.get_transform_z_axis_real

def set_transform_z_axis(*args):
  return _VolumeIO_a.set_transform_z_axis(*args)
set_transform_z_axis = _VolumeIO_a.set_transform_z_axis

def set_transform_z_axis_real(*args):
  return _VolumeIO_a.set_transform_z_axis_real(*args)
set_transform_z_axis_real = _VolumeIO_a.set_transform_z_axis_real

def make_change_to_bases_transform(*args):
  return _VolumeIO_a.make_change_to_bases_transform(*args)
make_change_to_bases_transform = _VolumeIO_a.make_change_to_bases_transform

def make_change_from_bases_transform(*args):
  return _VolumeIO_a.make_change_from_bases_transform(*args)
make_change_from_bases_transform = _VolumeIO_a.make_change_from_bases_transform

def concat_transforms(*args):
  return _VolumeIO_a.concat_transforms(*args)
concat_transforms = _VolumeIO_a.concat_transforms

def transform_point(*args):
  return _VolumeIO_a.transform_point(*args)
transform_point = _VolumeIO_a.transform_point

def transform_vector(*args):
  return _VolumeIO_a.transform_vector(*args)
transform_vector = _VolumeIO_a.transform_vector

def file_exists(*args):
  return _VolumeIO_a.file_exists(*args)
file_exists = _VolumeIO_a.file_exists

def file_directory_exists(*args):
  return _VolumeIO_a.file_directory_exists(*args)
file_directory_exists = _VolumeIO_a.file_directory_exists

def check_clobber_file(*args):
  return _VolumeIO_a.check_clobber_file(*args)
check_clobber_file = _VolumeIO_a.check_clobber_file

def check_clobber_file_default_suffix(*args):
  return _VolumeIO_a.check_clobber_file_default_suffix(*args)
check_clobber_file_default_suffix = _VolumeIO_a.check_clobber_file_default_suffix

def make_backup_file(*args):
  return _VolumeIO_a.make_backup_file(*args)
make_backup_file = _VolumeIO_a.make_backup_file

def cleanup_backup_file(*args):
  return _VolumeIO_a.cleanup_backup_file(*args)
cleanup_backup_file = _VolumeIO_a.cleanup_backup_file

def remove_file(*args):
  return _VolumeIO_a.remove_file(*args)
remove_file = _VolumeIO_a.remove_file

def copy_file(*args):
  return _VolumeIO_a.copy_file(*args)
copy_file = _VolumeIO_a.copy_file

def move_file(*args):
  return _VolumeIO_a.move_file(*args)
move_file = _VolumeIO_a.move_file

def expand_filename(*args):
  return _VolumeIO_a.expand_filename(*args)
expand_filename = _VolumeIO_a.expand_filename

def filename_extension_matches(*args):
  return _VolumeIO_a.filename_extension_matches(*args)
filename_extension_matches = _VolumeIO_a.filename_extension_matches

def remove_directories_from_filename(*args):
  return _VolumeIO_a.remove_directories_from_filename(*args)
remove_directories_from_filename = _VolumeIO_a.remove_directories_from_filename

def file_exists_as_compressed(*args):
  return _VolumeIO_a.file_exists_as_compressed(*args)
file_exists_as_compressed = _VolumeIO_a.file_exists_as_compressed

def get_temporary_filename():
  return _VolumeIO_a.get_temporary_filename()
get_temporary_filename = _VolumeIO_a.get_temporary_filename

def open_file(*args):
  return _VolumeIO_a.open_file(*args)
open_file = _VolumeIO_a.open_file

def open_file_with_default_suffix(*args):
  return _VolumeIO_a.open_file_with_default_suffix(*args)
open_file_with_default_suffix = _VolumeIO_a.open_file_with_default_suffix

def set_file_position(*args):
  return _VolumeIO_a.set_file_position(*args)
set_file_position = _VolumeIO_a.set_file_position

def close_file(*args):
  return _VolumeIO_a.close_file(*args)
close_file = _VolumeIO_a.close_file

def extract_directory(*args):
  return _VolumeIO_a.extract_directory(*args)
extract_directory = _VolumeIO_a.extract_directory

def get_absolute_filename(*args):
  return _VolumeIO_a.get_absolute_filename(*args)
get_absolute_filename = _VolumeIO_a.get_absolute_filename

def flush_file(*args):
  return _VolumeIO_a.flush_file(*args)
flush_file = _VolumeIO_a.flush_file

def input_character(*args):
  return _VolumeIO_a.input_character(*args)
input_character = _VolumeIO_a.input_character

def unget_character(*args):
  return _VolumeIO_a.unget_character(*args)
unget_character = _VolumeIO_a.unget_character

def input_nonwhite_character(*args):
  return _VolumeIO_a.input_nonwhite_character(*args)
input_nonwhite_character = _VolumeIO_a.input_nonwhite_character

def output_character(*args):
  return _VolumeIO_a.output_character(*args)
output_character = _VolumeIO_a.output_character

def skip_input_until(*args):
  return _VolumeIO_a.skip_input_until(*args)
skip_input_until = _VolumeIO_a.skip_input_until

def output_string(*args):
  return _VolumeIO_a.output_string(*args)
output_string = _VolumeIO_a.output_string

def input_string(*args):
  return _VolumeIO_a.input_string(*args)
input_string = _VolumeIO_a.input_string

def input_quoted_string(*args):
  return _VolumeIO_a.input_quoted_string(*args)
input_quoted_string = _VolumeIO_a.input_quoted_string

def input_possibly_quoted_string(*args):
  return _VolumeIO_a.input_possibly_quoted_string(*args)
input_possibly_quoted_string = _VolumeIO_a.input_possibly_quoted_string

def output_quoted_string(*args):
  return _VolumeIO_a.output_quoted_string(*args)
output_quoted_string = _VolumeIO_a.output_quoted_string

def input_binary_data(*args):
  return _VolumeIO_a.input_binary_data(*args)
input_binary_data = _VolumeIO_a.input_binary_data

def output_binary_data(*args):
  return _VolumeIO_a.output_binary_data(*args)
output_binary_data = _VolumeIO_a.output_binary_data

def input_newline(*args):
  return _VolumeIO_a.input_newline(*args)
input_newline = _VolumeIO_a.input_newline

def output_newline(*args):
  return _VolumeIO_a.output_newline(*args)
output_newline = _VolumeIO_a.output_newline

def input_line(*args):
  return _VolumeIO_a.input_line(*args)
input_line = _VolumeIO_a.input_line

def input_boolean(*args):
  return _VolumeIO_a.input_boolean(*args)
input_boolean = _VolumeIO_a.input_boolean

def output_boolean(*args):
  return _VolumeIO_a.output_boolean(*args)
output_boolean = _VolumeIO_a.output_boolean

def input_short(*args):
  return _VolumeIO_a.input_short(*args)
input_short = _VolumeIO_a.input_short

def output_short(*args):
  return _VolumeIO_a.output_short(*args)
output_short = _VolumeIO_a.output_short

def input_unsigned_short(*args):
  return _VolumeIO_a.input_unsigned_short(*args)
input_unsigned_short = _VolumeIO_a.input_unsigned_short

def output_unsigned_short(*args):
  return _VolumeIO_a.output_unsigned_short(*args)
output_unsigned_short = _VolumeIO_a.output_unsigned_short

def input_int(*args):
  return _VolumeIO_a.input_int(*args)
input_int = _VolumeIO_a.input_int

def output_int(*args):
  return _VolumeIO_a.output_int(*args)
output_int = _VolumeIO_a.output_int

def input_real(*args):
  return _VolumeIO_a.input_real(*args)
input_real = _VolumeIO_a.input_real

def output_real(*args):
  return _VolumeIO_a.output_real(*args)
output_real = _VolumeIO_a.output_real

def input_float(*args):
  return _VolumeIO_a.input_float(*args)
input_float = _VolumeIO_a.input_float

def output_float(*args):
  return _VolumeIO_a.output_float(*args)
output_float = _VolumeIO_a.output_float

def input_double(*args):
  return _VolumeIO_a.input_double(*args)
input_double = _VolumeIO_a.input_double

def output_double(*args):
  return _VolumeIO_a.output_double(*args)
output_double = _VolumeIO_a.output_double

def io_binary_data(*args):
  return _VolumeIO_a.io_binary_data(*args)
io_binary_data = _VolumeIO_a.io_binary_data

def io_newline(*args):
  return _VolumeIO_a.io_newline(*args)
io_newline = _VolumeIO_a.io_newline

def io_quoted_string(*args):
  return _VolumeIO_a.io_quoted_string(*args)
io_quoted_string = _VolumeIO_a.io_quoted_string

def io_boolean(*args):
  return _VolumeIO_a.io_boolean(*args)
io_boolean = _VolumeIO_a.io_boolean

def io_short(*args):
  return _VolumeIO_a.io_short(*args)
io_short = _VolumeIO_a.io_short

def io_unsigned_short(*args):
  return _VolumeIO_a.io_unsigned_short(*args)
io_unsigned_short = _VolumeIO_a.io_unsigned_short

def io_unsigned_char(*args):
  return _VolumeIO_a.io_unsigned_char(*args)
io_unsigned_char = _VolumeIO_a.io_unsigned_char

def io_int(*args):
  return _VolumeIO_a.io_int(*args)
io_int = _VolumeIO_a.io_int

def io_real(*args):
  return _VolumeIO_a.io_real(*args)
io_real = _VolumeIO_a.io_real

def io_float(*args):
  return _VolumeIO_a.io_float(*args)
io_float = _VolumeIO_a.io_float

def io_double(*args):
  return _VolumeIO_a.io_double(*args)
io_double = _VolumeIO_a.io_double

def io_ints(*args):
  return _VolumeIO_a.io_ints(*args)
io_ints = _VolumeIO_a.io_ints

def io_unsigned_chars(*args):
  return _VolumeIO_a.io_unsigned_chars(*args)
io_unsigned_chars = _VolumeIO_a.io_unsigned_chars

def initialize_progress_report(*args):
  return _VolumeIO_a.initialize_progress_report(*args)
initialize_progress_report = _VolumeIO_a.initialize_progress_report

def update_progress_report(*args):
  return _VolumeIO_a.update_progress_report(*args)
update_progress_report = _VolumeIO_a.update_progress_report

def terminate_progress_report(*args):
  return _VolumeIO_a.terminate_progress_report(*args)
terminate_progress_report = _VolumeIO_a.terminate_progress_report

def alloc_string(*args):
  return _VolumeIO_a.alloc_string(*args)
alloc_string = _VolumeIO_a.alloc_string

def create_string(*args):
  return _VolumeIO_a.create_string(*args)
create_string = _VolumeIO_a.create_string

def delete_string(*args):
  return _VolumeIO_a.delete_string(*args)
delete_string = _VolumeIO_a.delete_string

def concat_strings(*args):
  return _VolumeIO_a.concat_strings(*args)
concat_strings = _VolumeIO_a.concat_strings

def replace_string(*args):
  return _VolumeIO_a.replace_string(*args)
replace_string = _VolumeIO_a.replace_string

def concat_char_to_string(*args):
  return _VolumeIO_a.concat_char_to_string(*args)
concat_char_to_string = _VolumeIO_a.concat_char_to_string

def concat_to_string(*args):
  return _VolumeIO_a.concat_to_string(*args)
concat_to_string = _VolumeIO_a.concat_to_string

def string_length(*args):
  return _VolumeIO_a.string_length(*args)
string_length = _VolumeIO_a.string_length

def equal_strings(*args):
  return _VolumeIO_a.equal_strings(*args)
equal_strings = _VolumeIO_a.equal_strings

def is_lower_case(*args):
  return _VolumeIO_a.is_lower_case(*args)
is_lower_case = _VolumeIO_a.is_lower_case

def is_upper_case(*args):
  return _VolumeIO_a.is_upper_case(*args)
is_upper_case = _VolumeIO_a.is_upper_case

def get_lower_case(*args):
  return _VolumeIO_a.get_lower_case(*args)
get_lower_case = _VolumeIO_a.get_lower_case

def get_upper_case(*args):
  return _VolumeIO_a.get_upper_case(*args)
get_upper_case = _VolumeIO_a.get_upper_case

def string_ends_in(*args):
  return _VolumeIO_a.string_ends_in(*args)
string_ends_in = _VolumeIO_a.string_ends_in

def strip_outer_blanks(*args):
  return _VolumeIO_a.strip_outer_blanks(*args)
strip_outer_blanks = _VolumeIO_a.strip_outer_blanks

def find_character(*args):
  return _VolumeIO_a.find_character(*args)
find_character = _VolumeIO_a.find_character

def make_string_upper_case(*args):
  return _VolumeIO_a.make_string_upper_case(*args)
make_string_upper_case = _VolumeIO_a.make_string_upper_case

def blank_string(*args):
  return _VolumeIO_a.blank_string(*args)
blank_string = _VolumeIO_a.blank_string

def current_cpu_seconds():
  return _VolumeIO_a.current_cpu_seconds()
current_cpu_seconds = _VolumeIO_a.current_cpu_seconds

def current_realtime_seconds():
  return _VolumeIO_a.current_realtime_seconds()
current_realtime_seconds = _VolumeIO_a.current_realtime_seconds

def format_time(*args):
  return _VolumeIO_a.format_time(*args)
format_time = _VolumeIO_a.format_time

def print_time(*args):
  return _VolumeIO_a.print_time(*args)
print_time = _VolumeIO_a.print_time

def get_clock_time():
  return _VolumeIO_a.get_clock_time()
get_clock_time = _VolumeIO_a.get_clock_time

def sleep_program(*args):
  return _VolumeIO_a.sleep_program(*args)
sleep_program = _VolumeIO_a.sleep_program

def get_date():
  return _VolumeIO_a.get_date()
get_date = _VolumeIO_a.get_date


